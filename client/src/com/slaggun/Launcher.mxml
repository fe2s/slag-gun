<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2009 SlagGunTeam
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
  ~ Unless required by applicable law or agreed to in writing, software distributed under the
  ~ License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
  ~ either express or implied. See the License for the specific language governing permissions
  ~ and limitations under the License.
  -->

<mx:Application layout="horizontal"
                enterFrame="enterFrame()"

                initialize="initVariables()"
                applicationComplete="start()"

                paddingLeft="0"
                paddingRight="0"
                paddingTop="0"
                paddingBottom="0"

                xmlns:mx="http://www.adobe.com/2006/mxml"
                xmlns:monitor="com.slaggun.monitor.*">
    <mx:Script>
<![CDATA[
        import com.slaggun.monitor.MonitorContainer;
        import com.slaggun.util.Utils;
        import com.slaggun.util.log.LoggerConfig;

        import mx.core.Application;

        private var launcher:LauncherClass;
        private var logScrollTimer:Timer;

        private var latencies:Array;
        private var lastLatencyUpdated:Number = -1;
        private var _statisticLatencyDeviation:Number = 0;
        private var _latency:Number = 0;

        private var policyServer:String;


        private function initVariables():void {

            var application:Application = Application(Application.application);

            var hostParameter:String = application.parameters["host"];
            if (hostParameter != null) {
                txtHost.text = hostParameter;
            }

            policyServer = application.parameters["policyServer"];

            latencies = [];
            latencies.length = 100;

            LoggerConfig.instance.setTextArea(logOutput);
            launcher = new LauncherClass();

            launcher.resize(application.width, application.height);

            launcher.inititalize();

            initLogScrollTimer();
        }

        private function start():void {
            hookKeyboard();
            launcher.start();
        }

        private function updateLatency():void {
            var latenciesSize:uint = latencies.length;
            lastLatencyUpdated = (lastLatencyUpdated + 1) % latenciesSize;
            latencies[lastLatencyUpdated] = launcher.latency;
        }


        public function get statisticLatencyDeviation():Number {
            return _statisticLatencyDeviation;
        }

        public function get latency():Number {
            return _latency;
        }

        private function enterFrame():void {
            updateLatency();

            fpsOut.text = "fps: " + 1000 / launcher.enterFrame(output.graphics);
            latencyOut.text = "latency: " + Utils.getAvg(latencies);
            networkProccessingTime.text = "network: " + launcher.networkProcessingTime;

            Monitors.commitFrame();
            monitors.refreshMonitors();
        }

        private function hookKeyboard():void {
            stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDown);
            stage.addEventListener(KeyboardEvent.KEY_UP, keyUp);
        }

        private function keyDown(event:KeyboardEvent):void {
            launcher.buttonDown(event.keyCode);
        }

        private function keyUp(event:KeyboardEvent):void {
            launcher.buttonUp(event.keyCode);
        }

        private function mouseDown(event:MouseEvent):void {
            launcher.buttonDown(InputState.MOUSE_BUTTON_KEY_CODE);
        }

        private function mouseUp(event:MouseEvent):void {
            launcher.buttonUp(InputState.MOUSE_BUTTON_KEY_CODE);
        }

        private function mouseMove(event:MouseEvent):void {
            launcher.mouseMove(event.localX, event.localY);
        }

        private function resize():void {
            if (output != null)
                launcher.resize(output.width, output.height);
        }

        /**
         * Scrolls log's textArea to the bottom every 1 second
         */
        private function initLogScrollTimer():void {
            logScrollTimer = new Timer(1000);
            logScrollTimer.addEventListener(TimerEvent.TIMER, function():void {
                callLater(autoScrollTextArea, [logOutput]);
            });
            logScrollTimer.start();
        }

        /**
         * Scroll textArea to the bottom
         */
        private function autoScrollTextArea(target:TextArea):void {
            target.verticalScrollPosition = target.maxVerticalScrollPosition;
        }
        ]]>
</mx:Script>
    <mx:Canvas x="0" y="0" width="100%" height="100%">
        <mx:Canvas y="0" x="0" id="output" width="100%" height="100%"
                   mouseDown="mouseDown(event)"
                   mouseUp="mouseUp(event)"
                   mouseMove="mouseMove(event)"
                   resize="resize()"
                />
        <mx:HDividedBox width="100%" height="100%">
            <mx:Spacer width="100%"/>
            <mx:VBox height="100%"
                backgroundColor="#010101"
                backgroundAlpha="0.6">

                <!--   Use http://mycoputername/Launcher.swf?host=mycoputername&policyServer=policy.org -->
                <mx:TextInput id="txtHost" text="127.0.0.1"/>
                <mx:Button label="connect" click="launcher.connect(txtHost.text, policyServer)"/>
                <mx:Text id="fpsOut" color="red"/>
                <mx:Text id="latencyOut" color="red"/>
                <mx:Text id="networkProccessingTime" color="red"/>

                <mx:VDividedBox height="100%"
                                width="100%">
                    <monitor:MonitorListPanel id="monitors"
                                              width="100%"
                                              color="cyan"
                                              horizontalScrollPolicy="off"/>
                    <mx:TextArea id="logOutput"
                                 color="white"
                                 width="100%"
                                 height="100%"
                                 backgroundAlpha="0"
                                 editable="false"
                                 text="Version: 0.9.519{'\n'}"/>
                </mx:VDividedBox>
            </mx:VBox>
        </mx:HDividedBox>
    </mx:Canvas>
</mx:Application>